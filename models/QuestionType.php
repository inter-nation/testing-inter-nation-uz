<?php

namespace app\models;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "question_type".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $slug
 * @property int|null $count
 * @property int|null $time_allowed
 * @property string|null $created_at
 * @property string|null $updated_at
 * @property int|null $status
 *
 * @property Question[] $questions
 */
class QuestionType extends \yii\db\ActiveRecord
{
    public const STATUS_ACTIVE = 1;
    public const STATUS_NOT_ACTIVE = 2;

    public function fields()
    {
        return [
            'id',
            'name',
            'slug',
            'count',
            'time_allowed',
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'question_type';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'value' => date('Y-m-d H:i:s')
            ],
            [
                'class' => SluggableBehavior::class,
                'attribute' => 'name',
                'slugAttribute' => 'slug',
                'ensureUnique' => true,
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['count', 'time_allowed'], 'integer'],
            [['name'], 'string', 'max' => 255],
            [['name', 'count', 'time_allowed'], 'required'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'count' => 'Count',
            'time_allowed' => 'Time Allowed',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'status' => 'Status',
        ];
    }

    /**
     * Gets query for [[Questions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getQuestions()
    {
        return $this->hasMany(Question::class, ['question_type_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->status = self::STATUS_ACTIVE;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
